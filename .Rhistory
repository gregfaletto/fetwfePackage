)
)
()
"
)
setwd("/Users/gregfaletto/Documents/GitHub/fetwfePackage/")
devtools::build()
devtools::check()
setwd("/Users/gregfaletto/Documents/GitHub/did/simulations")
devtools::install()
setwd("/Users/gregfaletto/Documents/GitHub/fetwfePackage/")
devtools::install()
setwd("/Users/gregfaletto/Documents/GitHub/did/simulations")
source("did_small.R")
source("did_sims_small.R")
print(plot_eval(did_sim_small, "att_mse") + scale_y_log10() + ggtitle(""))
plot_eval(did_sim_small, "att_mse")
e <- evals(did_sim_small)
e_df <- as.data.frame(e)
remove(list=ls())
dev.off()
source("did_sims_small.R")
e <- evals(did_sim3)
e <- evals(did_sim_small)
e_df <- as.data.frame(e)
e
packageVersion("simulator")
?attgtToFetwfeDf
library(did)  # provides the mpdta example dataframe
data(mpdta)
head(mpdta)
tidy_df <- attgtToFetwfeDf(
data  = mpdta,
yname = "lemp",
tname = "year",
idname = "countyreal",
gname = "first.treat",
covars = c("lpop"))
head(tidy_df)
res <- fetwfe(pdata=tidy_df, time_var="time_var", unit_var="unit_var", treatment="treatment", response="response", covs="lpop")
summary(res)
res
print(res)
# Chart 1: Required 401(k) Contribution (X/Y) vs Target Savings Fraction (f)
f <- seq(0, 0.30, length.out = 100)
scenarios <- list(
c(t = 0.24, s = 0.18),
c(t = 0.30, s = 0.22),
c(t = 0.15, s = 0.12)
)
remove(list=ls())
# Chart 1: Required 401(k) Contribution (X/Y) vs Target Savings Fraction (f)
f <- seq(0, 0.30, length.out = 100)
scenarios <- list(
c(t = 0.24, s = 0.18),
c(t = 0.30, s = 0.22),
c(t = 0.15, s = 0.12)
)
mat <- sapply(scenarios, function(sc) {
(f * (1 - sc["s"])) / ((1 - sc["t"]) * (1 - f * sc["s"]))
})
matplot(f, mat, type = "l", lty = 1,
xlab = "Target savings fraction f",
ylab = "Required X/Y",
main = "Required 401(k) Contribution vs Target Savings")
legend("topleft",
legend = c("t=0.24, s=0.18", "t=0.30, s=0.22", "t=0.15, s=0.12"),
lty = 1)
dev.off()
rm(list=ls())
# Chart 2: Cumulative Retirement Balances Over 30 Years
years <- 1:30
Y <- 100000
t <- 0.24; s <- 0.18; f <- 0.15
X <- (f*(1-s)/((1-t)*(1-f*s))) * Y
tax_savings <- t * X
r <- 0.06  # annual return
balance_roth  <- numeric(length(years))
balance_trad  <- numeric(length(years))
for (i in years) {
if (i == 1) {
balance_roth[i] <- f*(1-s)*Y
balance_trad[i] <- X + tax_savings
} else {
balance_roth[i] <- balance_roth[i-1]*(1+r) + f*(1-s)*Y
balance_trad[i] <- balance_trad[i-1]*(1+r) + X + tax_savings
}
}
plot(years, balance_roth, type = "l",
xlab = "Year", ylab = "Account Balance",
main = "Roth vs Traditional + Reinvested Tax Savings",
ylim = range(c(balance_roth, balance_trad)))
lines(years, balance_trad, lty = 2)
legend("topleft", legend = c("Roth", "Traditional + Reinvest"),
lty = 1:2)
# Chart 2: Cumulative Retirement Balances Over 30 Years
years <- 1:30
Y <- 100000
t <- 0.24; s <- 0.18; f <- 0.15
X <- (f*(1-s)/((1-t)*(1-f*s))) * Y
tax_savings <- s * X
r <- 0.06  # annual return
balance_roth  <- numeric(length(years))
balance_trad  <- numeric(length(years))
for (i in years) {
if (i == 1) {
balance_roth[i] <- f*(1-s)*Y
balance_trad[i] <- X + tax_savings
} else {
balance_roth[i] <- balance_roth[i-1]*(1+r) + f*(1-s)*Y
balance_trad[i] <- balance_trad[i-1]*(1+r) + X + tax_savings
}
}
plot(years, balance_roth, type = "l",
xlab = "Year", ylab = "Account Balance",
main = "Roth vs Traditional + Reinvested Tax Savings",
ylim = range(c(balance_roth, balance_trad)))
lines(years, balance_trad, lty = 2)
legend("topleft", legend = c("Roth", "Traditional + Reinvest"),
lty = 1:2)
dev.off()
# Chart 2: Cumulative Retirement Balances Over 30 Years
years <- 1:30
Y <- 100000
t <- 0.24; s <- 0.18; f <- 0.15
X <- (f*(1-s)/((1-t)*(1-f*s))) * Y
tax_savings <- s * X
r <- 0.06  # annual return
balance_roth  <- numeric(length(years))
balance_trad  <- numeric(length(years))
for (i in years) {
if (i == 1) {
balance_roth[i] <- f*(1-s)*Y
balance_trad[i] <- X + tax_savings
} else {
balance_roth[i] <- balance_roth[i-1]*(1+r) + f*(1-s)*Y
balance_trad[i] <- balance_trad[i-1]*(1+r) + X + tax_savings
}
}
plot(years, balance_roth, type = "l",
xlab = "Year", ylab = "Account Balance",
main = "Roth vs Traditional + Reinvested Tax Savings",
ylim = range(c(balance_roth, balance_trad)))
lines(years, balance_trad, lty = 2)
legend("topleft", legend = c("Roth", "Traditional + Reinvest"),
lty = 1:2)
dev.off()
rm(list=ls())
# Chart 1: Required 401(k) Contribution (X/Y) vs Target Savings Fraction (f)
f <- seq(0, 0.30, length.out = 100)
scenarios <- list(
c(t = 0.24, s = 0.18),
c(t = 0.30, s = 0.22),
c(t = 0.15, s = 0.12)
)
mat <- sapply(scenarios, function(sc) {
(f * (1 - sc["s"])) / ((1 - sc["t"]) * (1 - f * sc["s"]))
})
# define a vector of colours and line‐types
cols <- c("red", "blue", "darkgreen")
lts <- c(1, 2, 3)
# draw the lines with matching cols and lty
matplot(f, mat, type = "l", col = cols, lty = lts, lwd = 2,
xlab = "Target savings fraction f",
ylab = "Required X/Y",
main = "Required 401(k) Contribution vs Target Savings")
# draw the legend with the same cols and lty
legend("topleft",
legend = c("t=0.24, s=0.18", "t=0.30, s=0.22", "t=0.15, s=0.12"),
col    = cols,
lty    = lts,
lwd    = 2,
bty    = "n")
dev.off()
rm(list=ls())
# Chart 2: Cumulative Retirement Balances Over 30 Years
years <- 1:30
Y <- 100000
t <- 0.24; s <- 0.18; f <- 0.15
X <- (f*(1-s)/((1-t)*(1-f*s))) * Y
tax_savings <- t * X
r <- 0.06  # annual return
balance_roth  <- numeric(length(years))
balance_trad  <- numeric(length(years))
for (i in years) {
if (i == 1) {
balance_roth[i] <- f*(1-s)*Y
balance_trad[i] <- X + tax_savings
} else {
balance_roth[i] <- balance_roth[i-1]*(1+r) + f*(1-s)*Y
balance_trad[i] <- balance_trad[i-1]*(1+r) + X + tax_savings
}
}
plot(years, balance_roth, type = "l",
xlab = "Year", ylab = "Account Balance",
main = "Roth vs Traditional + Reinvested Tax Savings",
ylim = range(c(balance_roth, balance_trad)))
lines(years, balance_trad, lty = 2)
legend("topleft", legend = c("Roth", "Traditional + Reinvest"),
lty = 1:2)
dev.off()
rm(list=ls())
## -----------------------------------------------------------
##  Plot f* = f (1-s) / ( (1+t+m) – f s )
## -----------------------------------------------------------
# --- Parameters (feel free to change) -----------------------
t <- 0.24   # marginal tax rate
s <- 0.18   # effective (average) tax rate
m <- 0.50   # employer match as a fraction of your contribution (50 %=0.50)
# --- f grid -------------------------------------------------
f_max <- min(0.40,            # don’t let the x-axis get silly
0.99 * (1 + t + m)/s)  # avoid the vertical asymptote
f <- seq(0, f_max, length.out = 300)
# --- Compute f* --------------------------------------------
f_star <- f * (1 - s) / ( (1 + t + m) - f * s )
# --- Plot ---------------------------------------------------
plot(f, f_star, type = "l", lwd = 2,
xlab = "Target fraction  f  (post-tax income)",
ylab = expression(paste("Required personal fraction  ", f^"*")),
main = expression(paste("Income-effect adjustment  f"^"*"*"  vs  target  f")))
abline(0, 1, lty = 2, col = "gray")   # 45° line for reference
legend("topleft", legend = c("f* curve", "f* = f"), lwd = c(2,1),
lty = c(1,2), col = c("black","gray"))
# Chart 3: Plot f* = f (1-s) / ( (1+t+m) – f s )
# --- Parameters ---------------------------------------------
t <- 0.24   # marginal tax rate
s <- 0.18   # effective (average) tax rate
m <- 0.50   # employer match as a fraction of your contribution (50 %=0.50)
# --- f grid -------------------------------------------------
f_max <- min(0.40,            # don’t let the x-axis get silly
0.99 * (1 + t + m)/s)  # avoid the vertical asymptote
f <- seq(0, f_max, length.out = 300)
# --- Compute f* --------------------------------------------
f_star <- f * (1 - s) / ( (1 + t + m) - f * s )
# --- Plot ---------------------------------------------------
plot(f, f_star, type = "l", lwd = 2, asp = 1,
xlim = c(0, f_max), ylim = c(0, f_max),          # equal ranges
xlab = "Target fraction  f  (post-tax income)",
ylab = expression("Required personal fraction  " * f^"*"),
main = expression("Income-effect adjustment  " * f^"*" * "  vs  target  f"))
abline(0, 1, lty = 2, col = "gray")   # full 45° line
legend("topleft", legend = c("f* curve", "f* = f"), lwd = c(2, 1),
lty = c(1, 2), col = c("black", "gray"))
dev.off()
rm(list=ls())
# Chart 3: Plot f* = f (1-s) / ( (1+t+m) – f s )
# --- Parameters ---------------------------------------------
t <- 0.24   # marginal tax rate
s <- 0.18   # effective (average) tax rate
m <- 0.50   # employer match as a fraction of your contribution (50 %=0.50)
# --- f grid -------------------------------------------------
f_max <- min(0.40,            # don’t let the x-axis get silly
0.99 * (1 + t + m)/s)  # avoid the vertical asymptote
f <- seq(0, f_max, length.out = 300)
# --- Compute f* --------------------------------------------
f_star <- f * (1 - s) / ( (1 + t + m) - f * s )
# --- Plot ---------------------------------------------------
plot(f, f_star, type = "l", lwd = 2, asp = 1,
xlim = c(0, f_max), ylim = c(0, f_max),          # equal ranges
xlab = "Target fraction  f  (post-tax income)",
ylab = expression("Required personal fraction  " * f^"*"),
main = expression("Income-effect adjustment  " * f^"*" * "  vs  target  f"))
abline(0, 1, lty = 2, col = "gray")   # full 45° line
legend("topleft", legend = c("f* curve", "f* = f"), lwd = c(2, 1),
lty = c(1, 2), col = c("black", "gray"))
# Chart 3: Plot f* = f (1-s) / ( (1+t+m) – f s )
# --- Parameters ---------------------------------------------
t <- 0.24   # marginal tax rate
s <- 0.18   # effective (average) tax rate
m <- 0.50   # employer match as a fraction of your contribution (50 %=0.50)
# --- f grid -------------------------------------------------
f_max <- min(0.40,            # don’t let the x-axis get silly
0.99 * (1 + t + m)/s)  # avoid the vertical asymptote
f <- seq(0, f_max, length.out = 300)
# --- Compute f* --------------------------------------------
f_star <- f * (1 - s) / ( (1 + t + m) - f * s )
# --- Plot ---------------------------------------------------
plot(f, f_star, type = "l", lwd = 2,
xlim = c(0, f_max), ylim = c(0, f_max),          # equal ranges
xlab = "Target fraction  f  (post-tax income)",
ylab = expression("Required personal fraction  " * f^"*"),
main = expression("Income-effect adjustment  " * f^"*" * "  vs  target  f"))
abline(0, 1, lty = 2, col = "gray")   # full 45° line
legend("topleft", legend = c("f* curve", "f* = f"), lwd = c(2, 1),
lty = c(1, 2), col = c("black", "gray"))
dev.off()
rm(list=ls())
# Chart 3: Plot f* = f (1-s) / ( (1+t+m) – f s )
# --- Parameters ---------------------------------------------
t <- 0.24   # marginal tax rate
s <- 0.18   # effective (average) tax rate
m <- 0.50   # employer match as a fraction of your contribution (50 %=0.50)
# --- f grid -------------------------------------------------
f_max <- min(0.40,            # don’t let the x-axis get silly
0.99 * (1 + t + m)/s)  # avoid the vertical asymptote
f <- seq(0, f_max, length.out = 300)
# --- Compute f* --------------------------------------------
f_star <- f * (1 - s) / ( (1 + t + m) - f * s )
# --- Plot ---------------------------------------------------
plot(f, f_star, type = "l", lwd = 2,
xlim = c(0, f_max), ylim = c(0, f_max),          # equal ranges
xlab = "Target fraction  f  (post-tax income)",
ylab = expression("Required personal fraction  " * f^"*"),
main = expression("Income-effect adjustment  " * f^"*" * "  vs  target  f"))
abline(0, 1, lty = 2, col = "gray")   # full 45° line
legend("topleft", legend = c("f* curve", "f* = f"), lwd = c(2, 1),
lty = c(1, 2), col = c("black", "gray"))
# Chart 3: Plot f* = f (1-s) / ( (1+t+m) – f s )
# --- Parameters ---------------------------------------------
t <- 0.24   # marginal tax rate
s <- 0.18   # effective (average) tax rate
m <- 0.50   # employer match as a fraction of your contribution (50 %=0.50)
# --- f grid -------------------------------------------------
f_max <- min(0.40,            # don’t let the x-axis get silly
0.99 * (1 + t + m)/s)  # avoid the vertical asymptote
f <- seq(0, f_max, length.out = 300)
# --- Compute f* --------------------------------------------
f_star <- f * (1 - s) / ( (1 + t + m) - f * s )
# --- Plot ---------------------------------------------------
plot(f, f_star, type = "l", lwd = 2,
xlim = c(0, f_max), ylim = c(0, f_max),          # equal ranges
xlab = "Target fraction  f  (post-tax income)",
ylab = expression("Required personal fraction  " * f^"*"),
main = expression("Income-effect adjustment  " * f^"*" * "  vs  target  f"))
abline(0, 1, lty = 2, col = "gray")   # full 45° line
legend("topleft", legend = c("f* curve", "f"), lwd = c(2, 1),
lty = c(1, 2), col = c("black", "gray"))
# Chart 3: Plot f* = f (1-s) / ( (1+t+m) – f s )
# --- Parameters ---------------------------------------------
t <- 0.24   # marginal tax rate
s <- 0.18   # effective (average) tax rate
m <- 0.50   # employer match as a fraction of your contribution (50 %=0.50)
# --- f grid -------------------------------------------------
f_max <- min(0.40,            # don’t let the x-axis get silly
0.99 * (1 + t + m)/s)  # avoid the vertical asymptote
f <- seq(0, f_max, length.out = 300)
# --- Compute f* --------------------------------------------
f_star <- f * (1 - s) / ( (1 + t + m) - f * s )
# --- Plot ---------------------------------------------------
plot(f, f_star, type = "l", lwd = 2,
xlim = c(0, f_max), ylim = c(0, f_max),          # equal ranges
xlab = "Target fraction  f  (post-tax income)",
ylab = expression("Required personal fraction  " * f^"*"),
main = expression("Income-effect adjustment  " * f^"*" * "  vs  target  f"))
abline(0, 1, lty = 2, col = "gray")   # full 45° line
legend("topleft", legend = c("f*", "f"), lwd = c(2, 1),
lty = c(1, 2), col = c("black", "gray"))
dev.off()
# Chart 3: Plot f* = f (1-s) / ( (1+t+m) – f s )
# --- Parameters ---------------------------------------------
t <- 0.24   # marginal tax rate
s <- 0.18   # effective (average) tax rate
m <- 0.50   # employer match as a fraction of your contribution (50 %=0.50)
# --- f grid -------------------------------------------------
f_max <- min(0.30,            # don’t let the x-axis get silly
0.99 * (1 + t + m)/s)  # avoid the vertical asymptote
f <- seq(0, f_max, length.out = 300)
# --- Compute f* --------------------------------------------
f_star <- f * (1 - s) / ( (1 + t + m) - f * s )
# --- Plot ---------------------------------------------------
plot(f, f_star, type = "l", lwd = 2,
xlim = c(0, f_max), ylim = c(0, f_max),          # equal ranges
xlab = "Target fraction  f  (post-tax income)",
ylab = expression("Required personal fraction  " * f^"*"),
main = expression("Income-effect adjustment  " * f^"*" * "  vs  target  f"))
abline(0, 1, lty = 2, col = "gray")   # full 45° line
legend("topleft", legend = c("f*", "f"), lwd = c(2, 1),
lty = c(1, 2), col = c("black", "gray"))
setwd("/Users/gregfaletto/Documents/Greg budgeting")
source("greg_budget.R")
dev.off()
setwd("/Users/gregfaletto/Documents/Greg budgeting")
source("greg_budget.R")
examine_data(year=2025, month="February", category="Other")
examine_data(year=2025, month="March", category="Other")
source("greg_budget.R")
examine_data(year=2025, month="March", category="Other")
examine_data(year=2025, month="February", category="Other")
setwd("/Users/gregfaletto/Documents/Greg budgeting")
source("budget_analysis_refactored.R")
setwd("/Users/gregfaletto/Documents/Greg budgeting")
rm(list=ls())
source("make_category_mapping.R")
getwd()
build_mapping("/Users/gregfaletto/Documents/Greg budgeting/budget_functions.R")
source("budget_analysis_refactored.R")
rm(list=ls())
source("budget_analysis_refactored.R")
rm(list=ls())
source("budget_analysis_refactored.R")
rm(list=ls())
source("budget_analysis_refactored.R")
rm(list=ls())
source("budget_analysis_refactored.R")
source("budget_analysis_refactored.R")
rm(list=ls())
source("budget_analysis_refactored.R")
rlang::last_trace()
rm(list=ls())
source("budget_analysis_refactored.R")
rlang::last_trace()
rm(list=ls())
source("budget_analysis_refactored.R")
rlang::last_trace()
rm(list=ls())
source("budget_analysis_refactored.R")
rlang::last_trace()
rm(list=ls())
source("budget_analysis_refactored.R")
rm(list=ls())
source("budget_analysis_refactored.R")
rm(list=ls())
source("budget_analysis_refactored.R")
rm(list=ls())
source("budget_analysis_refactored.R")
rm(list=ls())
source("budget_analysis_refactored.R")
rm(list=ls())
source("budget_analysis_refactored.R")
rm(list=ls())
source("budget_analysis_refactored.R")
rm(list=ls())
source("budget_analysis_refactored.R")
warnings()
rm(list=ls())
source("budget_analysis_refactored.R")
rm(list=ls())
source("budget_analysis_refactored.R")
?read_csv
rm(list=ls())
source("budget_analysis_refactored.R")
rm(list=ls())
source("budget_analysis_refactored.R")
rm(list=ls())
source("budget_analysis_refactored.R")
rlang::last_trace()
source("budget_analysis_refactored.R")
rm(list=ls())
setwd("/Users/gregfaletto/Documents/Greg budgeting")
source("greg_budget.R")
examine_data(year=2025, month="February", category="Other")
examine_data(year=2025, month="March", category="Other")
source("greg_budget.R")
examine_data(year=2025, month="March", category="Other")
source("greg_budget.R")
examine_data(year=2025, month="March", category="Other")
source("greg_budget.R")
examine_data(year=2025, month="March", category="Other")
source("greg_budget.R")
examine_data(year=2025, month="March", category="Other")
source("greg_budget.R")
examine_data(year=2025, month="March", category="Other")
source("greg_budget.R")
examine_data(year=2025, month="March", category="Other")
source("greg_budget.R")
examine_data(year=2025, month="March", category="Other")
examine_data(year=2025, month="April", category="Other")
source("greg_budget.R")
examine_data(year=2025, month="April", category="Other")
source("greg_budget.R")
examine_data(year=2025, month="April", category="Other")
source("greg_budget.R")
examine_data(year=2025, month="April", category="Other")
source("greg_budget.R")
examine_data(year=2025, month="April", category="Other")
examine_data(year=2025, month="May", category="Other")
examine_data(year=2025, month="April", category="Other")
source("greg_budget.R")
examine_data(year=2025, month="May", category="Other")
source("greg_budget.R")
examine_data(year=2025, month="May", category="Other")
source("greg_budget.R")
examine_data(year=2025, month="May", category="Other")
source("greg_budget.R")
examine_data(year=2025, month="May", category="Other")
source("greg_budget.R")
examine_data(year=2025, month="May", category="Other")
source("greg_budget.R")
source("greg_budget.R")
examine_data(year=2025, month="May", category="Subscriptions")
examine_data(year=2025, month="Apriil", category="Subscriptions")
examine_data(year=2025, month="April", category="Subscriptions")
examine_data(year=2025, month="March", category="Subscriptions")
examine_data(year=2025, month="February", category="Subscriptions")
examine_data(year=2025, month="January", category="Subscriptions")
examine_data(year=2024, month="December", category="Subscriptions")
examine_data(year=2024, month="November", category="Subscriptions")
examine_data(year=2024, month="October", category="Subscriptions")
examine_data(year=2024, month="September", category="Subscriptions")
examine_data(year=2024, month="August", category="Subscriptions")
examine_data(year=2024, month="July", category="Subscriptions")
examine_data(year=2024, month="June", category="Subscriptions")
source("greg_budget.R")
source("greg_budget.R")
source("greg_budget.R")
examine_data(year=2023, month="March", category="Harper")
examine_data(year=2023, month="April", category="Harper")
examine_data(year=2023, month="May", category="Harper")
examine_data(year=2025, month="May", category="Harper")
examine_data(year=2025, month="April", category="Harper")
examine_data(year=2025, month="March", category="Harper")
examine_data(year=2025, month="April", category="Skincare/Pharmacy/Health")
examine_data(year=2024, month="December", category="Skincare/Pharmacy/Health")
examine_data(year=2025, month="May", category="Entertainment")
examine_data(year=2025, month="May", category="Gas/Parking/Public Transit")
examine_data(year=2025, month="April", category="Tech/Business")
examine_data(year=2025, month="April", category="March")
examine_data(year=2025, month="March", category="Tech/Business")
examine_data(year=2025, month="May", category="Weed")
source("greg_budget.R")
examine_data(year=2025, month="May", category="Gas/Parking/Public Transit")
examine_data(year=2025, month="May", category="Entertainment")
