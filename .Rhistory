time_var <- "time"       # Column for the time period
unit_var <- "unit"       # Column for the unit identifier
treatment <- "treated"   # Column for the treatment dummy indicator
covs <- c()  # Columns for covariates
response <- "response"   # Column for the response variable
# Convert the dataset
pdata <- dat |>
dplyr::mutate(
# Rename id to unit and convert to character
{{ unit_var }} := as.character(id),
# Ensure treatment dummy is 0/1
{{ treatment }} := as.integer(treat),
# Rename y to response
{{ response }} := y
) |>
dplyr::select(
{{ time_var }}, {{ unit_var }}, {{ treatment }}, {{ response }}
)
result <- fetwfe(
pdata = pdata,              # The panel dataset
time_var = "time",          # The time variable
unit_var = "unit",          # The unit identifier
treatment = "treated",      # The treatment dummy indicator
response = "response",      # The response variable
q = 0.5                    # The L_q penalty for fusion regularization
)
result$att_hat
result
rm(list=ls())
set.seed(123456L)
# 5 time periods, 30 individuals, and 4 waves of treatment
tmax = 5; imax = 30; nlvls = 5
dat =
expand.grid(time = 1:tmax, id = 1:imax) |>
within({
# Initialize columns
cohort      = rep(1:nlvls, each = imax/nlvls)[id]
effect      = NA
first_treat = NA
for (lvls in 1:nlvls) {
effect      = ifelse(cohort==lvls, sample(2:10, 1), effect)
first_treat = ifelse(cohort==lvls, lvls + 1, first_treat)
}
first_treat = ifelse(first_treat>tmax, Inf, first_treat)
treat       = time >= first_treat
rel_time    = time - first_treat
y           = id + time + ifelse(treat, effect*rel_time, 0) + rnorm(imax*tmax, 0.01)
rm(lvls, cohort, effect)
})
# Convert `dat` to `pdata` based on the specified requirements
# Specify column names for the pdata format
time_var <- "time"       # Column for the time period
unit_var <- "unit"       # Column for the unit identifier
treatment <- "treated"   # Column for the treatment dummy indicator
covs <- c()  # Columns for covariates
response <- "response"   # Column for the response variable
# Convert the dataset
pdata <- dat |>
dplyr::mutate(
# Rename id to unit and convert to character
{{ unit_var }} := as.character(id),
# Ensure treatment dummy is 0/1
{{ treatment }} := as.integer(treat),
# Rename y to response
{{ response }} := y
) |>
dplyr::select(
{{ time_var }}, {{ unit_var }}, {{ treatment }}, {{ response }}
)
result <- fetwfe(
pdata = pdata,              # The panel dataset
time_var = "time",          # The time variable
unit_var = "unit",          # The unit identifier
treatment = "treated",      # The treatment dummy indicator
response = "response",      # The response variable
q = 0.5                    # The L_q penalty for fusion regularization
)
result$att_hat
nrow(pdata)
result$lambda.max
result$lambda_star
rm(list=ls())
set.seed(123456L)
# 5 time periods, 30 individuals, and 4 waves of treatment
tmax = 5; imax = 30; nlvls = 5
dat =
expand.grid(time = 1:tmax, id = 1:imax) |>
within({
# Initialize columns
cohort      = rep(1:nlvls, each = imax/nlvls)[id]
effect      = NA
first_treat = NA
for (lvls in 1:nlvls) {
effect      = ifelse(cohort==lvls, sample(5:10, 1), effect)
first_treat = ifelse(cohort==lvls, lvls + 1, first_treat)
}
first_treat = ifelse(first_treat>tmax, Inf, first_treat)
treat       = time >= first_treat
rel_time    = time - first_treat
y           = id + time + ifelse(treat, effect*rel_time, 0) + rnorm(imax*tmax, 0.01)
rm(lvls, cohort, effect)
})
# Convert `dat` to `pdata` based on the specified requirements
# Specify column names for the pdata format
time_var <- "time"       # Column for the time period
unit_var <- "unit"       # Column for the unit identifier
treatment <- "treated"   # Column for the treatment dummy indicator
covs <- c()  # Columns for covariates
response <- "response"   # Column for the response variable
# Convert the dataset
pdata <- dat |>
dplyr::mutate(
# Rename id to unit and convert to character
{{ unit_var }} := as.character(id),
# Ensure treatment dummy is 0/1
{{ treatment }} := as.integer(treat),
# Rename y to response
{{ response }} := y
) |>
dplyr::select(
{{ time_var }}, {{ unit_var }}, {{ treatment }}, {{ response }}
)
result <- fetwfe(
pdata = pdata,              # The panel dataset
time_var = "time",          # The time variable
unit_var = "unit",          # The unit identifier
treatment = "treated",      # The treatment dummy indicator
response = "response",      # The response variable
q = 0.5                    # The L_q penalty for fusion regularization
)
result$att_hat
devtools::build()
devtools::document()
devtools::check()
devtools::test()
devtools::build()
devtools::build()
devtools::test()
devtools::document()
devtools::check()
devtools::build()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::test()
devtools::install()
library(fetwfe)
packageVersion("fetwfe")
?fetwfe
set.seed(23451)
library(bacondecomp)
data(divorce)
# sig_eps_sq and sig_eps_c_sq, calculated in a separate run of `fetwfe(),
# are provided to speed up the computation of the example
res <- fetwfe(
pdata = divorce[divorce$sex == 2, ],
time_var = "year",
unit_var = "st",
treatment = "changed",
covs = c("murderrate", "lnpersinc", "afdcrolls"),
response = "suiciderate_elast_jag",
sig_eps_sq = 0.1025361,
sig_eps_c_sq = 4.227651e-35,
verbose = TRUE)
# Average treatment effect on the treated units (in percentage point
# units)
100 * res$att_hat
devtools::build()
devtools::test()
devtools::test()
devtools::build()
devtools::build()
devtools::test()
devtools::build()
devtools::test()
devtools::build()
devtools::test()
devtools::document()
devtools::check()
remove.packages("fetwfe")
devtools::install()
library(fetwfe)
?fetwfe
set.seed(23451)
library(bacondecomp)
data(divorce)
# sig_eps_sq and sig_eps_c_sq, calculated in a separate run of `fetwfe(),
# are provided to speed up the computation of the example
res <- fetwfe(
pdata = divorce[divorce$sex == 2, ],
time_var = "year",
unit_var = "st",
treatment = "changed",
covs = c("murderrate", "lnpersinc", "afdcrolls"),
response = "suiciderate_elast_jag",
sig_eps_sq = 0.1025361,
sig_eps_c_sq = 4.227651e-35,
verbose = TRUE)
# Average treatment effect on the treated units (in percentage point
# units)
100 * res$att_hat
low_att <- 100 * (res$att_hat - qnorm(1 - 0.05 / 2) * res$att_se)
high_att <- 100 * (res$att_hat + qnorm(1 - 0.05 / 2) * res$att_se)
c(low_att, high_att)
set.seed(23451)
library(bacondecomp)
data(divorce)
# sig_eps_sq and sig_eps_c_sq, calculated in a separate run of `fetwfe(),
# are provided to speed up the computation of the example
res <- fetwfe(
pdata = divorce[divorce$sex == 2, ],
time_var = "year",
unit_var = "st",
treatment = "changed",
covs = c("murderrate", "lnpersinc", "afdcrolls"),
response = "suiciderate_elast_jag",
sig_eps_sq = 0.1025361,
sig_eps_c_sq = 4.227651e-35,
verbose = TRUE, add_ridge=TRUE)
# Average treatment effect on the treated units (in percentage point
# units)
100 * res$att_hat
low_att <- 100 * (res$att_hat - qnorm(1 - 0.05 / 2) * res$att_se)
high_att <- 100 * (res$att_hat + qnorm(1 - 0.05 / 2) * res$att_se)
c(low_att, high_att)
devtools::test()
devtools::document()
devtools::build()
devtools::build()
devtools::build()
devtools::test()
devtools::check()
devtools::build()
devtools::document()
devtools::build()
devtools::build()
devtools::document()
devtools::document()
devtools::build()
devtools::check()
devtools::test()
library(tibble)
generate_panel_data <- function(N = 30, T = 10, R = 9, seed = 123) {
set.seed(seed)
stopifnot(R <= T - 1)
# Create a vector of unit IDs (as characters)
unit_ids <- sprintf("unit%02d", 1:N)
time_vals <- 1:T
# For each unit, decide the first treatment time:
# With probability 0.5 the unit is never treated (first_treat = Inf);
# Otherwise, sample a first treatment time uniformly between 2 and T.
first_treat <- sapply(unit_ids, function(u) {
if (runif(1) < 0.5) {
Inf
} else {
if(R > 1){
sample(2:(R + 1), 1)
} else{
2
}
}
})
# Build panel data (each unit appears for every time period)
df <- do.call(rbind, lapply(seq_along(unit_ids), function(i) {
unit <- unit_ids[i]
ft <- first_treat[i]
data.frame(
time      = as.integer(time_vals),            # must be integer
unit      = as.character(unit),               # must be character
treatment = as.integer(ifelse(time_vals >= ft, 1, 0)),  # must be integer 0/1
cov1      = rnorm(T),
cov2      = runif(T),
y         = rnorm(T)                          # outcome (numeric)
)
}))
# The idCohorts function automatically removes any unit that was treated in period 1.
# (This is simulated by removing any row with time == 1 and treatment == 1.)
df <- df[!(df$time == 1 & df$treatment == 1), ]
# Order rows by unit then time
df <- df[order(df$unit, df$time), ]
rownames(df) <- NULL
return(df)
}
df <- generate_panel_data()
fetwfe(
pdata     = tibble::as_tibble(df),
time_var  = "time",
unit_var  = "unit",
treatment = "treatment",
covs      = c("cov1", "cov2"),
response  = "y",
q         = 0.5,
verbose   = FALSE
)
devtools::test()
devtools::build()
devtools::build()
devtools::build()
.Last.error.trace
devtools::build()
devtools::document()
devtools::test()
devtools::check()
devtools::install()
library(fetwfe)
set.seed(23451)
library(bacondecomp)
data(divorce)
# sig_eps_sq and sig_eps_c_sq, calculated in a separate run of `fetwfe(),
# are provided to speed up the computation of the example
res <- fetwfe(
pdata = divorce[divorce$sex == 2, ],
time_var = "year",
unit_var = "st",
treatment = "changed",
covs = c("murderrate", "lnpersinc", "afdcrolls"),
response = "suiciderate_elast_jag",
sig_eps_sq = 0.1025361,
sig_eps_c_sq = 4.227651e-35,
verbose = TRUE)
# Average treatment effect on the treated units (in percentage point
# units)
100 * res$att_hat
# Conservative 95% confidence interval for ATT (in percentage point units)
low_att <- 100 * (res$att_hat - qnorm(1 - 0.05 / 2) * res$att_se)
high_att <- 100 * (res$att_hat + qnorm(1 - 0.05 / 2) * res$att_se)
c(low_att, high_att)
devtools::check()
devtools::build()
devtools::document()
devtools::build()
devtools::test()
devtools::test()
devtools::test()
devtools::check()
devtools::document()
devtools::check()
remove.packages("fetwfe")
devtools::install()
library(fetwfe)
?fetwfe
set.seed(23451)
library(bacondecomp)
data(divorce)
# sig_eps_sq and sig_eps_c_sq, calculated in a separate run of `fetwfe(),
# are provided to speed up the computation of the example
res <- fetwfe(
pdata = divorce[divorce$sex == 2, ],
time_var = "year",
unit_var = "st",
treatment = "changed",
covs = c("murderrate", "lnpersinc", "afdcrolls"),
response = "suiciderate_elast_jag",
sig_eps_sq = 0.1025361,
sig_eps_c_sq = 4.227651e-35,
verbose = TRUE)
# Average treatment effect on the treated units (in percentage point
# units)
100 * res$att_hat
# Conservative 95% confidence interval for ATT (in percentage point units)
low_att <- 100 * (res$att_hat - qnorm(1 - 0.05 / 2) * res$att_se)
high_att <- 100 * (res$att_hat + qnorm(1 - 0.05 / 2) * res$att_se)
c(low_att, high_att)
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build()
devtools::check()
devtools::test()
library(fetwfe)
sim_coefs <- genCoefs(R = 5, T = 30, d = 12, density = 0.1, eff_size = 2, seed = 101)
sim_coefs
sim_data <- simulateData(sim_coefs, N = 120, sig_eps_sq = 5, sig_eps_c_sq = 5, distribution = "gaussian")
sim_data
str(sim_data)
head(sim_data$pdata)
devtools::build_vignettes()
devtools::build_vignettes()
coefs <- genCoefs(R = 5, T = 30, d = 12, density = 0.1, eff_size = 2, seed = 2025)
result_piped <- coefs |>
simulateData(N = 120, sig_eps_sq = 5, sig_eps_c_sq = 5) |>
fetwfeWithSimulatedData()
cat("Estimated Overall ATT from piped workflow:", result_piped$att_hat, "\n")
coefs <- genCoefs(R = 5, T = 30, d = 12, density = 0.1, eff_size = 2, seed = 2025)
result_piped <- coefs |>
simulateData(N = 120, sig_eps_sq = 5, sig_eps_c_sq = 5) |>
fetwfeWithSimulatedData()
cat("Estimated Overall ATT from piped workflow:", result_piped$att_hat, "\n")
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build()
devtools::document()
devtools::build_vignettes()
devtools::document()
devtools::test()
devtools::check()
devtools::document()
devtools::build()
remove.packages("fetwfe")
devtools::install()
library(fetwfe)
?fetwfe
set.seed(23451)
library(bacondecomp)
data(divorce)
# sig_eps_sq and sig_eps_c_sq, calculated in a separate run of `fetwfe(),
# are provided to speed up the computation of the example
res <- fetwfe(
pdata = divorce[divorce$sex == 2, ],
time_var = "year",
unit_var = "st",
treatment = "changed",
covs = c("murderrate", "lnpersinc", "afdcrolls"),
response = "suiciderate_elast_jag",
sig_eps_sq = 0.1025361,
sig_eps_c_sq = 4.227651e-35,
verbose = TRUE)
# Average treatment effect on the treated units (in percentage point
# units)
100 * res$att_hat
# Conservative 95% confidence interval for ATT (in percentage point units)
low_att <- 100 * (res$att_hat - qnorm(1 - 0.05 / 2) * res$att_se)
high_att <- 100 * (res$att_hat + qnorm(1 - 0.05 / 2) * res$att_se)
c(low_att, high_att)
devtools::release()
devtools::spell_check()
devtools::document()
devtools::build()
devtools::build_vignettes()
devtools::spell_check()
devtools::release()
devtools::check()
devtools::build()
devtools::check()
devtools::document()
getwd()
# (1) read the raw DESCRIPTION
d <- read.dcf("DESCRIPTION")
# (2) see what it thinks your Authors@R field is
d[, "Authors@R"]
devtools::check()
devtools::release()
devtools::check_rhub()
devtools::release()
?rhubv2
devtools::check_win_devel()
devtools::release()
devtools::release()
devtools::build_vignettes()
devtools::build()
devtools::check()
devtools::test()
devtools::spell_check()
devtools::release()
devtools::build()
devtools::release()
devtools::check_rhub()
devtools::release()
devtools::check_win_devel()
devtools::build()
devtools::test()
devtools::check()
usethis::use_build_ignore("air.toml")
devtools::build()
devtools::check()
install.packages("V8")
remove.packages("fetwfe")
devtools::install(upgrade = "never", dependencies = FALSE)
# install.packages("revdepcheck")
library(revdepcheck)
install.packages("revdepcheck")
library(revdepcheck)
remotes::install_github("r-lib/revdepcheck")
# install.packages("revdepcheck")
library(revdepcheck)
# point it at your fetwfe source directory:
revdep_check(pkg = ".", reverse = "bacondecomp")
?revdep_dheck
?revdep_check()
# install.packages("revdepcheck")
library(revdepcheck)
# point it at your fetwfe source directory:
revdep_check(pkg = ".")
# when it’s done:
revdep_report()
devtools::document()
devtools::build()
devtools::build()
devtools::test()
devtools::check()
devtools::check_win_devel()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build()
devtools::build()
devtools::build()
devtools::document()
devtools::build_vignettes()
devtools::check()
devtools::test()
devtools::release()
