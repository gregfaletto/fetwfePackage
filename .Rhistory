for (chrt in 1:imax) {
cohort = ifelse(id==chrt, sample.int(nlvls, 1), cohort)
}
for (lvls in 1:nlvls) {
effect      = ifelse(cohort==lvls, sample(2:10, 1), effect)
first_treat = ifelse(cohort==lvls, sample(1:(tmax+20), 1), first_treat)
}
first_treat = ifelse(first_treat>tmax, Inf, first_treat)
treat       = time >= first_treat
rel_time    = time - first_treat
y           = id + time + ifelse(treat, effect*rel_time, 0) + cov1 + cov2 + cov3 + rnorm(imax*tmax)
rm(chrt, lvls, cohort, effect)
})
head(dat)
dat
min(dat$first_treat)
# 60 time periods, 30 individuals, and 5 waves of treatment
tmax = 60; imax = 30; nlvls = 5
dat =
expand.grid(time = 1:tmax, id = 1:imax) |>
within({
# Generate time-invariant covariates
cov1 = rep(runif(imax, 0, 1), each = tmax)  # Random uniform values (0, 1) per individual
cov2 = rep(sample(1:5, imax, replace = TRUE), each = tmax)  # Random categorical values (1-5) per individual
cov3 = rep(rnorm(imax, mean = 0, sd = 1), each = tmax)  # Random Gaussian values (mean=0, sd=1) per individual
# Initialize columns
cohort      = NA
effect      = NA
first_treat = NA
for (chrt in 1:imax) {
cohort = ifelse(id==chrt, sample.int(nlvls, 1), cohort)
}
for (lvls in 1:nlvls) {
effect      = ifelse(cohort==lvls, sample(2:10, 1), effect)
first_treat = ifelse(cohort==lvls, sample(1:(tmax+20), 1), first_treat)
}
first_treat = ifelse(first_treat>tmax, Inf, first_treat)
treat       = time >= first_treat
rel_time    = time - first_treat
y           = id + time + ifelse(treat, effect*rel_time, 0) + cov1 + cov2 + cov3 + rnorm(imax*tmax)
rm(chrt, lvls, cohort, effect)
})
head(dat)
min(dat$first_treat)
rm(list=ls())
set.seed(123456L)
# 60 time periods, 30 individuals, and 5 waves of treatment
tmax = 60; imax = 30; nlvls = 5
dat =
expand.grid(time = 1:tmax, id = 1:imax) |>
within({
# Generate time-invariant covariates
cov1 = rep(runif(imax, 0, 1), each = tmax)  # Random uniform values (0, 1) per individual
cov2 = rep(sample(1:5, imax, replace = TRUE), each = tmax)  # Random categorical values (1-5) per individual
cov3 = rep(rnorm(imax, mean = 0, sd = 1), each = tmax)  # Random Gaussian values (mean=0, sd=1) per individual
# Initialize columns
cohort      = NA
effect      = NA
first_treat = NA
for (chrt in 1:imax) {
cohort = ifelse(id==chrt, sample.int(nlvls, 1), cohort)
}
for (lvls in 1:nlvls) {
effect      = ifelse(cohort==lvls, sample(2:10, 1), effect)
first_treat = ifelse(cohort==lvls, sample(1:(tmax+20), 1), first_treat)
}
first_treat = ifelse(first_treat>tmax, Inf, first_treat)
treat       = time >= first_treat
rel_time    = time - first_treat
y           = id + time + ifelse(treat, effect*rel_time, 0) + cov1 + cov2 + cov3 + rnorm(imax*tmax)
rm(chrt, lvls, cohort, effect)
})
head(dat)
# Specify column names for the pdata format
time_var <- "time"       # Column for the time period
unit_var <- "unit"       # Column for the unit identifier
treatment <- "treated"   # Column for the treatment dummy indicator
covs <- c("cov1", "cov2", "cov3")  # Columns for covariates
response <- "response"   # Column for the response variable
# Convert the dataset
pdata <- dat |>
dplyr::mutate(
# Rename id to unit and convert to character
{{ unit_var }} := as.character(id),
# Ensure treatment dummy is 0/1 and meets absorbing state requirements
{{ treatment }} := as.integer(treat),
# Rename y to response
{{ response }} := y
) |>
dplyr::select(
{{ time_var }}, {{ unit_var }}, {{ treatment }}, dplyr::all_of(covs), {{ response }}
)
# Preview the resulting pdata dataframe
head(pdata)
library(fetwfe)
result <- fetwfe(
pdata = as.data.frame(pdata),              # The panel dataset
time_var = "time",          # The time variable
unit_var = "unit",          # The unit identifier
treatment = "treated",      # The treatment dummy indicator
covs = c("cov1", "cov2", "cov3"),  # Covariates
response = "response",      # The response variable
q = 0.5,                    # The L_q penalty for fusion regularization
verbose = TRUE              # Print details of the progress
)
head(as.data.frame(pdata))
remove.packages("fetwfe")
# install.packages("remotes")  # if needed
remotes::install_github("gregfaletto/fetwfePackage")
?fetwfe
library(fetwfe)
?fetwfe
set.seed(23451)
library(bacondecomp)
data(divorce)
res <- fetwfe(
pdata = divorce[divorce$sex == 2, ],
time_var = "year",
unit_var = "st",
treatment = "changed",
covs = c("murderrate", "lnpersinc", "afdcrolls"),
response = "suiciderate_elast_jag",
q = 0.5,
verbose = TRUE)
set.seed(123456L)
# 60 time periods, 30 individuals, and 5 waves of treatment
tmax = 60; imax = 30; nlvls = 5
dat =
expand.grid(time = 1:tmax, id = 1:imax) |>
within({
# Generate time-invariant covariates
cov1 = rep(runif(imax, 0, 1), each = tmax)  # Random uniform values (0, 1) per individual
cov2 = rep(sample(1:5, imax, replace = TRUE), each = tmax)  # Random categorical values (1-5) per individual
cov3 = rep(rnorm(imax, mean = 0, sd = 1), each = tmax)  # Random Gaussian values (mean=0, sd=1) per individual
# Initialize columns
cohort      = NA
effect      = NA
first_treat = NA
for (chrt in 1:imax) {
cohort = ifelse(id==chrt, sample.int(nlvls, 1), cohort)
}
for (lvls in 1:nlvls) {
effect      = ifelse(cohort==lvls, sample(2:10, 1), effect)
first_treat = ifelse(cohort==lvls, sample(1:(tmax+20), 1), first_treat)
}
first_treat = ifelse(first_treat>tmax, Inf, first_treat)
treat       = time >= first_treat
rel_time    = time - first_treat
y           = id + time + ifelse(treat, effect*rel_time, 0) + cov1 + cov2 + cov3 + rnorm(imax*tmax)
rm(chrt, lvls, cohort, effect)
})
head(dat)
# Specify column names for the pdata format
time_var <- "time"       # Column for the time period
unit_var <- "unit"       # Column for the unit identifier
treatment <- "treated"   # Column for the treatment dummy indicator
covs <- c("cov1", "cov2", "cov3")  # Columns for covariates
response <- "response"   # Column for the response variable
# Convert the dataset
pdata <- dat |>
dplyr::mutate(
# Rename id to unit and convert to character
{{ unit_var }} := as.character(id),
# Ensure treatment dummy is 0/1 and meets absorbing state requirements
{{ treatment }} := as.integer(treat),
# Rename y to response
{{ response }} := y
) |>
dplyr::select(
{{ time_var }}, {{ unit_var }}, {{ treatment }}, dplyr::all_of(covs), {{ response }}
)
# Preview the resulting pdata dataframe
head(pdata)
result <- fetwfe(
pdata = as.data.frame(pdata),              # The panel dataset
time_var = "time",          # The time variable
unit_var = "unit",          # The unit identifier
treatment = "treated",      # The treatment dummy indicator
covs = c("cov1", "cov2", "cov3"),  # Covariates
response = "response",      # The response variable
q = 0.5,                    # The L_q penalty for fusion regularization
verbose = TRUE              # Print details of the progress
)
str("banana")
type("banana")
?is.char
?is.character
remove.packages("fetwfe")
# install.packages("remotes")  # if needed
remotes::install_github("gregfaletto/fetwfePackage")
library(fetwfe)
?fetwfe
set.seed(23451)
library(bacondecomp)
data(divorce)
res <- fetwfe(
pdata = divorce[divorce$sex == 2, ],
time_var = "year",
unit_var = "st",
treatment = "changed",
covs = c("murderrate", "lnpersinc", "afdcrolls"),
response = "suiciderate_elast_jag",
q = 0.5,
verbose = TRUE)
remove(list=ls())
library(fetwfe)
set.seed(123456L)
# 60 time periods, 30 individuals, and 5 waves of treatment
tmax = 60; imax = 30; nlvls = 5
dat =
expand.grid(time = 1:tmax, id = 1:imax) |>
within({
# Generate time-invariant covariates
cov1 = rep(runif(imax, 0, 1), each = tmax)  # Random uniform values (0, 1) per individual
cov2 = rep(sample(1:5, imax, replace = TRUE), each = tmax)  # Random categorical values (1-5) per individual
cov3 = rep(rnorm(imax, mean = 0, sd = 1), each = tmax)  # Random Gaussian values (mean=0, sd=1) per individual
# Initialize columns
cohort      = NA
effect      = NA
first_treat = NA
for (chrt in 1:imax) {
cohort = ifelse(id==chrt, sample.int(nlvls, 1), cohort)
}
for (lvls in 1:nlvls) {
effect      = ifelse(cohort==lvls, sample(2:10, 1), effect)
first_treat = ifelse(cohort==lvls, sample(1:(tmax+20), 1), first_treat)
}
first_treat = ifelse(first_treat>tmax, Inf, first_treat)
treat       = time >= first_treat
rel_time    = time - first_treat
y           = id + time + ifelse(treat, effect*rel_time, 0) + cov1 + cov2 + cov3 + rnorm(imax*tmax)
rm(chrt, lvls, cohort, effect)
})
head(dat)
# Specify column names for the pdata format
time_var <- "time"       # Column for the time period
unit_var <- "unit"       # Column for the unit identifier
treatment <- "treated"   # Column for the treatment dummy indicator
covs <- c("cov1", "cov2", "cov3")  # Columns for covariates
response <- "response"   # Column for the response variable
# Convert the dataset
pdata <- dat |>
dplyr::mutate(
# Rename id to unit and convert to character
{{ unit_var }} := as.character(id),
# Ensure treatment dummy is 0/1 and meets absorbing state requirements
{{ treatment }} := as.integer(treat),
# Rename y to response
{{ response }} := y
) |>
dplyr::select(
{{ time_var }}, {{ unit_var }}, {{ treatment }}, dplyr::all_of(covs), {{ response }}
)
# Preview the resulting pdata dataframe
head(pdata)
library(fetwfe)
result <- fetwfe(
pdata = as.data.frame(pdata),              # The panel dataset
time_var = "time",          # The time variable
unit_var = "unit",          # The unit identifier
treatment = "treated",      # The treatment dummy indicator
covs = c("cov1", "cov2", "cov3"),  # Covariates
response = "response",      # The response variable
q = 0.5,                    # The L_q penalty for fusion regularization
verbose = TRUE              # Print details of the progress
)
result$att_hat
usethis::use_citation()
devtools::document()
devtools::install()
remove.packages("fewtfe")
remove.packages("fetwfe")
# install.packages("remotes")  # if needed
remotes::install_github("gregfaletto/fetwfePackage")
library(fetwfe)
set.seed(23451)
library(bacondecomp)
data(divorce)
res <- fetwfe(
pdata = divorce[divorce$sex == 2, ],
time_var = "year",
unit_var = "st",
treatment = "changed",
covs = c("murderrate", "lnpersinc", "afdcrolls"),
response = "suiciderate_elast_jag",
q = 0.5,
verbose = TRUE)
rm(list=ls())
set.seed(123456L)
# 60 time periods, 30 individuals, and 5 waves of treatment
tmax = 60; imax = 30; nlvls = 5
dat =
expand.grid(time = 1:tmax, id = 1:imax) |>
within({
# Generate time-invariant covariates
cov1 = rep(runif(imax, 0, 1), each = tmax)  # Random uniform values (0, 1) per individual
cov2 = rep(sample(1:5, imax, replace = TRUE), each = tmax)  # Random categorical values (1-5) per individual
cov3 = rep(rnorm(imax, mean = 0, sd = 1), each = tmax)  # Random Gaussian values (mean=0, sd=1) per individual
# Initialize columns
cohort      = NA
effect      = NA
first_treat = NA
for (chrt in 1:imax) {
cohort = ifelse(id==chrt, sample.int(nlvls, 1), cohort)
}
for (lvls in 1:nlvls) {
effect      = ifelse(cohort==lvls, sample(2:10, 1), effect)
first_treat = ifelse(cohort==lvls, sample(1:(tmax+20), 1), first_treat)
}
first_treat = ifelse(first_treat>tmax, Inf, first_treat)
treat       = time >= first_treat
rel_time    = time - first_treat
y           = id + time + ifelse(treat, effect*rel_time, 0) + cov1 + cov2 + cov3 + rnorm(imax*tmax)
rm(chrt, lvls, cohort, effect)
})
head(dat)
# Specify column names for the pdata format
time_var <- "time"       # Column for the time period
unit_var <- "unit"       # Column for the unit identifier
treatment <- "treated"   # Column for the treatment dummy indicator
covs <- c("cov1", "cov2", "cov3")  # Columns for covariates
response <- "response"   # Column for the response variable
# Convert the dataset
pdata <- dat |>
dplyr::mutate(
# Rename id to unit and convert to character
{{ unit_var }} := as.character(id),
# Ensure treatment dummy is 0/1 and meets absorbing state requirements
{{ treatment }} := as.integer(treat),
# Rename y to response
{{ response }} := y
) |>
dplyr::select(
{{ time_var }}, {{ unit_var }}, {{ treatment }}, dplyr::all_of(covs), {{ response }}
)
# Preview the resulting pdata dataframe
head(pdata)
library(fetwfe)
result <- fetwfe(
pdata = as.data.frame(pdata),              # The panel dataset
time_var = "time",          # The time variable
unit_var = "unit",          # The unit identifier
treatment = "treated",      # The treatment dummy indicator
covs = c("cov1", "cov2", "cov3"),  # Covariates
response = "response",      # The response variable
q = 0.5,                    # The L_q penalty for fusion regularization
verbose = TRUE              # Print details of the progress
)
result$att_hat
result$att_hat - qnorm(1 - 0.05 / 2) * result$att_se
result$att_hat + qnorm(1 - 0.05 / 2) * result$att_se
is_tibble(dat)
?is_tibble
tibble::is_tibble(dat)
str(dat)
str(pdata)
tibble::is_tibble(pdata)
citation("fetwfe")
devtools::document()
devtools::install()
remove.packages("fetwfe")
# install.packages("remotes")  # if needed
remotes::install_github("gregfaletto/fetwfePackage")
library(fetwfe)
remove.packages("fetwfe")
# install.packages("remotes")  # if needed
remotes::install_github("gregfaletto/fetwfePackage")
library(fetwfe)
citation("fetwfe")
?fetwfe
set.seed(23451)
library(bacondecomp)
data(divorce)
res <- fetwfe(
pdata = divorce[divorce$sex == 2, ],
time_var = "year",
unit_var = "st",
treatment = "changed",
covs = c("murderrate", "lnpersinc", "afdcrolls"),
response = "suiciderate_elast_jag",
q = 0.5,
verbose = TRUE)
rm(list=ls())
set.seed(123456L)
# 60 time periods, 30 individuals, and 5 waves of treatment
tmax = 60; imax = 30; nlvls = 5
dat =
expand.grid(time = 1:tmax, id = 1:imax) |>
within({
# Generate time-invariant covariates
cov1 = rep(runif(imax, 0, 1), each = tmax)  # Random uniform values (0, 1) per individual
cov2 = rep(sample(1:5, imax, replace = TRUE), each = tmax)  # Random categorical values (1-5) per individual
cov3 = rep(rnorm(imax, mean = 0, sd = 1), each = tmax)  # Random Gaussian values (mean=0, sd=1) per individual
# Initialize columns
cohort      = NA
effect      = NA
first_treat = NA
for (chrt in 1:imax) {
cohort = ifelse(id==chrt, sample.int(nlvls, 1), cohort)
}
for (lvls in 1:nlvls) {
effect      = ifelse(cohort==lvls, sample(2:10, 1), effect)
first_treat = ifelse(cohort==lvls, sample(1:(tmax+20), 1), first_treat)
}
first_treat = ifelse(first_treat>tmax, Inf, first_treat)
treat       = time >= first_treat
rel_time    = time - first_treat
y           = id + time + ifelse(treat, effect*rel_time, 0) + cov1 + cov2 + cov3 + rnorm(imax*tmax)
rm(chrt, lvls, cohort, effect)
})
head(dat)
# Specify column names for the pdata format
time_var <- "time"       # Column for the time period
unit_var <- "unit"       # Column for the unit identifier
treatment <- "treated"   # Column for the treatment dummy indicator
covs <- c("cov1", "cov2", "cov3")  # Columns for covariates
response <- "response"   # Column for the response variable
# Convert the dataset
pdata <- dat |>
dplyr::mutate(
# Rename id to unit and convert to character
{{ unit_var }} := as.character(id),
# Ensure treatment dummy is 0/1
{{ treatment }} := as.integer(treat),
# Rename y to response
{{ response }} := y
) |>
dplyr::select(
{{ time_var }}, {{ unit_var }}, {{ treatment }}, dplyr::all_of(covs), {{ response }}
)
# Preview the resulting pdata dataframe
head(pdata)
library(fetwfe)
result <- fetwfe(
pdata = as.data.frame(pdata),              # The panel dataset
time_var = "time",          # The time variable
unit_var = "unit",          # The unit identifier
treatment = "treated",      # The treatment dummy indicator
covs = c("cov1", "cov2", "cov3"),  # Covariates
response = "response",      # The response variable
q = 0.5,                    # The L_q penalty for fusion regularization
verbose = TRUE              # Print details of the progress
)
rm(list=ls())
set.seed(123456L)
# 60 time periods, 30 individuals, and 5 waves of treatment
tmax = 60; imax = 30; nlvls = 5
dat =
expand.grid(time = 1:tmax, id = 1:imax) |>
within({
# Generate time-invariant covariates
cov1 = rep(runif(imax, 0, 1), each = tmax)  # Random uniform values (0, 1) per individual
cov2 = rep(sample(1:5, imax, replace = TRUE), each = tmax)  # Random categorical values (1-5) per individual
cov3 = rep(rnorm(imax, mean = 0, sd = 1), each = tmax)  # Random Gaussian values (mean=0, sd=1) per individual
# Initialize columns
cohort      = NA
effect      = NA
first_treat = NA
for (chrt in 1:imax) {
cohort = ifelse(id==chrt, sample.int(nlvls, 1), cohort)
}
for (lvls in 1:nlvls) {
effect      = ifelse(cohort==lvls, sample(2:10, 1), effect)
first_treat = ifelse(cohort==lvls, sample(1:(tmax+20), 1), first_treat)
}
first_treat = ifelse(first_treat>tmax, Inf, first_treat)
treat       = time >= first_treat
rel_time    = time - first_treat
y           = id + time + ifelse(treat, effect*rel_time, 0) + cov1 + cov2 + cov3 + rnorm(imax*tmax)
rm(chrt, lvls, cohort, effect)
})
head(dat)
# Specify column names for the pdata format
time_var <- "time"       # Column for the time period
unit_var <- "unit"       # Column for the unit identifier
treatment <- "treated"   # Column for the treatment dummy indicator
covs <- c("cov1", "cov2", "cov3")  # Columns for covariates
response <- "response"   # Column for the response variable
# Convert the dataset
pdata <- dat |>
dplyr::mutate(
# Rename id to unit and convert to character
{{ unit_var }} := as.character(id),
# Ensure treatment dummy is 0/1
{{ treatment }} := as.integer(treat),
# Rename y to response
{{ response }} := y
) |>
dplyr::select(
{{ time_var }}, {{ unit_var }}, {{ treatment }}, dplyr::all_of(covs), {{ response }}
)
# Preview the resulting pdata dataframe
head(pdata)
library(fetwfe)
result <- fetwfe(
pdata = pdata,              # The panel dataset
time_var = "time",          # The time variable
unit_var = "unit",          # The unit identifier
treatment = "treated",      # The treatment dummy indicator
covs = c("cov1", "cov2", "cov3"),  # Covariates
response = "response",      # The response variable
q = 0.5,                    # The L_q penalty for fusion regularization
verbose = TRUE              # Print details of the progress
)
result$catt_df
citation("fetwfe")
str(dat)
unique(dat$first_treat)
dat
head(dat)
316.82+523.85+638.78+1784.82
2*12.29 + 14.98
