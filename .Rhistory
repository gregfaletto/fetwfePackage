}))
# Order rows by unit then time
df <- df[order(df$unit, df$time), ]
rownames(df) <- NULL
return(df)
}
library(fetwfe)
pdf <- generate_bad_panel_data()
fetwfe(
pdata     = pdf,
time_var  = "time",
unit_var  = "unit",
treatment = "treatment",
covs      = c("cov1", "cov2"),
response  = "y",
verbose   = FALSE
)
devtools::test()
devtools::test()
remove.packages("fetwfe")
# install.packages("remotes")  # if needed
remotes::install_github("gregfaletto/fetwfePackage")
library(fetwfe)
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::check()
?fetwfe
devtools::build_vignettes()
?devtools::build_vignettes()
?devtools::build_vignettes(quiet=FALSE)
devtools::build_vignettes(quiet=FALSE)
usethis::use_vignette("my-vignette-name")
devtools::build_vignettes()
devtools::test()
devtools::check()
devtools::build_vignettes()
devtools::check()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::check()
devtools::build_vignettes()
devtools::check()
remove.packages("fetwfe")
# install.packages("remotes")  # if needed
remotes::install_github("gregfaletto/fetwfePackage")
library(fetwfe)
devtools::build_vignettes()
devtools::check()
devtools::check()
devtools::build_vignettes()
devtools::check()
devtools::build_vignettes()
devtools::check()
devtools::test()
devtools::check_rhub()
devtools::rhubv2()
devtools::rhubv2()
?rhubv2
rhub::rhubv2()
library(rhub)
rhubv2()
?rhubv2
rhub::check()
rhub_check()
devtools::check_win_devel()
?fetwfe
set.seed(23451)
library(bacondecomp)
data(divorce)
res <- fetwfe(
pdata = divorce[divorce$sex == 2, ],
time_var = "year",
unit_var = "st",
treatment = "changed",
covs = c("murderrate", "lnpersinc", "afdcrolls"),
response = "suiciderate_elast_jag",
q = 0.5,
verbose = TRUE)
res$sig_eps_sq
res$sig_eps_c_sq
set.seed(23451)
library(bacondecomp)
data(divorce)
res <- fetwfe(
pdata = divorce[divorce$sex == 2, ],
time_var = "year",
unit_var = "st",
treatment = "changed",
covs = c("murderrate", "lnpersinc", "afdcrolls"),
response = "suiciderate_elast_jag",
q = 0.5,
sig_eps_sq = 0.1025361,
sig_eps_c_sq = 4.227651e-35,
verbose = TRUE)
remove.packages("fetwfe")
# install.packages("remotes")  # if needed
remotes::install_github("gregfaletto/fetwfePackage")
library(fetwfe)
?fetwfe
devtools::document()
remove.packages("fetwfe")
# install.packages("remotes")  # if needed
remotes::install_github("gregfaletto/fetwfePackage")
library(fetwfe)
?fetwfe
?fetwfe
remove.packages("fetwfe")
# install.packages("remotes")  # if needed
remotes::install_github("gregfaletto/fetwfePackage")
library(fetwfe)
?fetwfe
set.seed(23451)
library(bacondecomp)
data(divorce)
# sig_eps_sq and sig_eps_c_sq, calculated in a separate run of `fetwfe(),
# are provided to speed up the computation of the example
res <- fetwfe(
pdata = divorce[divorce$sex == 2, ],
time_var = "year",
unit_var = "st",
treatment = "changed",
covs = c("murderrate", "lnpersinc", "afdcrolls"),
response = "suiciderate_elast_jag",
sig_eps_sq = 0.1025361,
sig_eps_c_sq = 4.227651e-35,
verbose = TRUE)
start <- Sys.time()
res <- fetwfe(
pdata = divorce[divorce$sex == 2, ],
time_var = "year",
unit_var = "st",
treatment = "changed",
covs = c("murderrate", "lnpersinc", "afdcrolls"),
response = "suiciderate_elast_jag",
sig_eps_sq = 0.1025361,
sig_eps_c_sq = 4.227651e-35,
verbose = TRUE)
print(Sys.time() - start)
devtools::check()
set.seed(23451)
library(bacondecomp)
data(divorce)
# sig_eps_sq and sig_eps_c_sq, calculated in a separate run of `fetwfe(),
# are provided to speed up the computation of the example
res <- fetwfe(
pdata = divorce[divorce$sex == 2, ],
time_var = "year",
unit_var = "st",
treatment = "changed",
covs = c("murderrate", "lnpersinc", "afdcrolls"),
response = "suiciderate_elast_jag",
sig_eps_sq = 0.1025361,
sig_eps_c_sq = 4.227651e-35,
verbose = TRUE)
# Average treatment effect on the treated units (in percentage point
# units)
100 * res$att_hat
# Conservative 95% confidence interval for ATT (in percentage point units)
low_att <- 100 * (res$att_hat - qnorm(1 - 0.05 / 2) * res$att_se)
high_att <- 100 * (res$att_hat + qnorm(1 - 0.05 / 2) * res$att_se)
c(low_att, high_att)
# Cohort average treatment effects and confidence intervals (in percentage
# point units)
catt_df_pct <- res$catt_df
catt_df_pct[["Estimated TE"]] <- 100 * catt_df_pct[["Estimated TE"]]
catt_df_pct[["SE"]] <- 100 * catt_df_pct[["SE"]]
catt_df_pct[["ConfIntLow"]] <- 100 * catt_df_pct[["ConfIntLow"]]
catt_df_pct[["ConfIntHigh"]] <- 100 * catt_df_pct[["ConfIntHigh"]]
catt_df_pct
?check_win_devel
devtools::check_win_devel()
remove.packages("fetwfe")
# install.packages("remotes")  # if needed
remotes::install_github("gregfaletto/fetwfePackage")
library(fetwfe)
?fetwfe
?check_win_devel
library(devtools)
?check_win_devel
devtools::check_win_release()
3 %% 2
2 %% 2
devtools::test()
sprintf("unit%02d", 1:2)
devtools::test()
devtools::test()
generate_minimal_panel_data <- function(seed = 123) {
set.seed(seed)
N <- 2
T <- 2
# Create a vector of unit IDs (as characters)
unit_ids <- sprintf("unit%02d", 1:N)
time_vals <- 1:T
# For each unit, decide the first treatment time:
# one treated, one untreated unit.
first_treat <- sapply(unit_ids, function(u) {
if (u  == "unit01") {
Inf
} else {
2
}
})
# Build panel data (each unit appears for every time period)
df <- do.call(rbind, lapply(seq_along(unit_ids), function(i) {
unit <- unit_ids[i]
ft <- first_treat[i]
data.frame(
time      = as.integer(time_vals),            # must be integer
unit      = as.character(unit),               # must be character
treatment = as.integer(ifelse(time_vals >= ft, 1, 0)),  # must be integer 0/1
cov1      = rnorm(T),
y         = rnorm(T)                          # outcome (numeric)
)
}))
# The idCohorts function automatically removes any unit that was treated in period 1.
# (This is simulated by removing any row with time == 1 and treatment == 1.)
df <- df[!(df$time == 1 & df$treatment == 1), ]
# Order rows by unit then time
df <- df[order(df$unit, df$time), ]
rownames(df) <- NULL
return(df)
}
pdf <- generate_minimal_panel_data()
pdf
fetwfe(
pdata     = pdf,
time_var  = "time",
unit_var  = "unit",
treatment = "treatment",
covs      = c("cov1"),
response  = "y",
verbose   = FALSE
)
2 * 2
1 * 1
matrix(as.numeric(NA), nrow = 2 * 2, ncol = 1)
remove.packages("fetwfe")
# install.packages("remotes")  # if needed
remotes::install_github("gregfaletto/fetwfePackage")
library(fetwfe)
generate_minimal_panel_data <- function(seed = 123) {
set.seed(seed)
N <- 2
T <- 2
# Create a vector of unit IDs (as characters)
unit_ids <- sprintf("unit%02d", 1:N)
time_vals <- 1:T
# For each unit, decide the first treatment time:
# one treated, one untreated unit.
first_treat <- sapply(unit_ids, function(u) {
if (u  == "unit01") {
Inf
} else {
2
}
})
# Build panel data (each unit appears for every time period)
df <- do.call(rbind, lapply(seq_along(unit_ids), function(i) {
unit <- unit_ids[i]
ft <- first_treat[i]
data.frame(
time      = as.integer(time_vals),            # must be integer
unit      = as.character(unit),               # must be character
treatment = as.integer(ifelse(time_vals >= ft, 1, 0)),  # must be integer 0/1
cov1      = rnorm(T),
y         = rnorm(T)                          # outcome (numeric)
)
}))
# The idCohorts function automatically removes any unit that was treated in period 1.
# (This is simulated by removing any row with time == 1 and treatment == 1.)
df <- df[!(df$time == 1 & df$treatment == 1), ]
# Order rows by unit then time
df <- df[order(df$unit, df$time), ]
rownames(df) <- NULL
return(df)
}
pdf <- generate_minimal_panel_data()
pdf
result <- fetwfe(
pdata     = pdf,
time_var  = "time",
unit_var  = "unit",
treatment = "treatment",
covs      = c("cov1"),
response  = "y",
verbose   = FALSE
)
devtools::test()
remove.packages("fetwfe")
# install.packages("remotes")  # if needed
remotes::install_github("gregfaletto/fetwfePackage")
library(fetwfe)
devtools::test()
remove.packages("fetwfe")
# install.packages("remotes")  # if needed
remotes::install_github("gregfaletto/fetwfePackage")
library(fetwfe)
devtools::test()
remove.packages("fetwfe")
# install.packages("remotes")  # if needed
remotes::install_github("gregfaletto/fetwfePackage")
library(fetwfe)
devtools::test()
devtools::test()
genInvTwoWayFusionTransformMat <- function(n_vars, first_inds, R){
stopifnot(length(n_vars) == 1)
stopifnot(length(first_inds) == R)
D <- matrix(0, n_vars, n_vars)
diag(D) <- 1
if(R > 1){
for(j in 1:(R - 1)){
index_j <- first_inds[j]
next_index <- first_inds[j + 1]
D[index_j:n_vars, index_j] <- 1
D[next_index:n_vars, next_index] <- 1
if(index_j + 1 <= next_index - 1){
for(k in (index_j + 1):(next_index - 1)){
D[k, (index_j + 1):k] <- 1
}
}
}
} else{
index_j <- first_inds[1]
# next_index <- first_inds[j + 1]
D[index_j:n_vars, index_j] <- 1
# D[next_index:n_vars, next_index] <- 1
# if(index_j + 1 <= next_index - 1){
# for(k in (index_j + 1):(next_index - 1)){
#     D[k, (index_j + 1):k] <- 1
# }
# }
}
return(D)
}
N <- 2
T <- 2
R <- 1
d <- 1
num_treats <- 1
p <- R + T - 1 + d * (1 + R + T - 1) + (d + 1) * num_treats
p
first_inds
f_inds <- integer(R)
for(r in 1:R){
f_inds[r] <- 1 + (r - 1)*(2*T - r)/2
}
f_inds
first_inds <- f_inds
D <- matrix(0, p, p)
diag(D) <- 1
D
first_inds
index_j <- first_inds[1]
# next_index <- first_inds[j + 1]
D[index_j:n_vars, index_j] <- 1
index_j <- first_inds[1]
# next_index <- first_inds[j + 1]
D[index_j:p, index_j] <- 1
D
solve(D)
?stop
stop("no butts")
remove.packages("fetwfe")
# install.packages("remotes")  # if needed
remotes::install_github("gregfaletto/fetwfePackage")
library(fetwfe)
devtools::test()
remove.packages("fetwfe")
# install.packages("remotes")  # if needed
remotes::install_github("gregfaletto/fetwfePackage")
library(fetwfe)
devtools::test()
devtools::test()
devtools::test()
devtools::test()
sample(2:(1 + 1), 1)
sample(2:(1 + 1), 1)
sample(2:(1 + 1), 1)
sample(2:(1 + 1), 1)
sample(2:2, 1)
sample(2:(2 + 1), 1)
sample(2:(2 + 1), 1)
sample(2:(2 + 1), 1)
sample(2:(2 + 1), 1)
sample(2:(2 + 1), 1)
sample(2:(2 + 1), 1)
devtools::test()
?fetwfe
citation("bacondecomp")
devtools::test()
devtools::check()
?check_win_devel
devtools::check()
usethis::use_mit_license("Gregory Faletto")
?use_mit_license
devtools::check()
devtools::release()
?spell_check()
devtools::spell_check()
devtools::document()
remove.packages("fetwfe")
# install.packages("remotes")  # if needed
remotes::install_github("gregfaletto/fetwfePackage")
library(fetwfe)
devtools::spell_check()
devtools::release()
remove.packages("fetwfe")
# install.packages("remotes")  # if needed
remotes::install_github("gregfaletto/fetwfePackage")
library(fetwfe)
devtools::spell_check()
devtools::check()
devtools::release()
remove.packages("fetwfe")
# install.packages("remotes")  # if needed
remotes::install_github("gregfaletto/fetwfePackage")
library(fetwfe)
devtools::check()
devtools::release()
remove.packages("fetwfe")
# install.packages("remotes")  # if needed
remotes::install_github("gregfaletto/fetwfePackage")
library(fetwfe)
devtools::check()
devtools::build()
devtools::check()
remove.packages("fetwfe")
# install.packages("remotes")  # if needed
remotes::install_github("gregfaletto/fetwfePackage")
library(fetwfe)
devtools::check()
devtools::release()
.Last.error
remove.packages("fetwfe")
# install.packages("remotes")  # if needed
remotes::install_github("gregfaletto/fetwfePackage")
library(fetwfe)
devtools::check()
devtools::release()
remove.packages("fetwfe")
# install.packages("remotes")  # if needed
remotes::install_github("gregfaletto/fetwfePackage")
library(fetwfe)
devtools::check()
?fetwfe
set.seed(23451)
library(bacondecomp)
data(divorce)
# sig_eps_sq and sig_eps_c_sq, calculated in a separate run of `fetwfe(),
# are provided to speed up the computation of the example
res <- fetwfe(
pdata = divorce[divorce$sex == 2, ],
time_var = "year",
unit_var = "st",
treatment = "changed",
covs = c("murderrate", "lnpersinc", "afdcrolls"),
response = "suiciderate_elast_jag",
sig_eps_sq = 0.1025361,
sig_eps_c_sq = 4.227651e-35,
verbose = TRUE)
packageVersion("expm")
packageVersion("glmnet")
packageVersion("grpreg")
packageVersion("bacondecomp")
packageVersion("knitr")
packageVersion("rmarkdown")
packageVersion("dplyr")
desc::desc(file = "DESCRIPTION")$validate()
desc::desc(file = "DESCRIPTION")$validate()
desc::desc(file = "DESCRIPTION")$validate()
desc::desc(file = "DESCRIPTION")$validate()
remove.packages("fetwfe")
# install.packages("remotes")  # if needed
remotes::install_github("gregfaletto/fetwfePackage")
library(fetwfe)
devtools::check()
desc::desc(file = "DESCRIPTION")$validate()
devtools::release()
devtools::spell_check()
devtools::release()
devtools::release()
desc::desc(file = "DESCRIPTION")$validate()
desc::desc(file = "DESCRIPTION")$validate()
39.98/36
41.06/54
41.16/54
devtools::test()
remove.packages("fetwfe")
# install.packages("remotes")  # if needed
remotes::install_github("gregfaletto/fetwfePackage")
library(fetwfe)
devtools:::check()
devtools::test()
devtools::release()
devtools::check_win_devel()
devtools::release()
setwd("/Users/gregfaletto/Documents/Greg budgeting")
source("greg_budget.R")
remove.packages("fetwfe")
# install.packages("remotes")  # if needed
remotes::install_github("gregfaletto/fetwfePackage")
library(fetwfe)
devtools::test()
devtools::check()
devtools::spell_check()
devtools::release()
